apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: {{ .Values.global.namespace }}
data:
  DATABASE_URL: "postgresql://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Values.postgresql.name }}:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.auth.database }}?schema=public"
  NODE_ENV: {{ .Values.api.env.NODE_ENV | quote }}
  PORT: {{ .Values.api.env.PORT | quote }}
  FRONTEND_URL: {{ .Values.api.env.FRONTEND_URL | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: api-secret
  namespace: {{ .Values.global.namespace }}
type: Opaque
stringData:
  JWT_SECRET: {{ .Values.api.secrets.jwtSecret | quote }}
  JWT_REFRESH_SECRET: {{ .Values.api.secrets.jwtRefreshSecret | quote }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.api.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.api.name }}
    app.kubernetes.io/name: {{ .Values.api.name }}
    app.kubernetes.io/component: backend
spec:
  type: {{ .Values.api.service.type }}
  ports:
    - port: {{ .Values.api.service.port }}
      targetPort: {{ .Values.api.service.port }}
      protocol: TCP
      name: http
  selector:
    app: {{ .Values.api.name }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.api.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.api.name }}
    app.kubernetes.io/name: {{ .Values.api.name }}
    app.kubernetes.io/component: backend
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.api.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.api.name }}
      annotations:
        {{- if .Values.monitoring.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.api.service.port | quote }}
        prometheus.io/path: {{ .Values.monitoring.prometheus.serviceMonitor.path | quote }}
        {{- end }}
    spec:
      containers:
        - name: {{ .Values.api.name }}
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.api.service.port }}
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: api-config
            - secretRef:
                name: api-secret
          {{- if .Values.api.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.api.livenessProbe.path }}
              port: {{ .Values.api.service.port }}
            initialDelaySeconds: {{ .Values.api.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.api.livenessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.api.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.api.readinessProbe.path }}
              port: {{ .Values.api.service.port }}
            initialDelaySeconds: {{ .Values.api.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.api.readinessProbe.periodSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
      {{- if .Values.nodeAffinity.enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      {{- toYaml .Values.nodeAffinity.architectures | nindent 22 }}
      {{- end }}
