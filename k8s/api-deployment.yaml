apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: godjira
data:
  DATABASE_URL: "postgresql://godjira:godjira123@postgres:5432/godjira?schema=public"
  NODE_ENV: "production"
  PORT: "3000"
  FRONTEND_URL: "https://godjira.example.com"
---
apiVersion: v1
kind: Secret
metadata:
  name: api-secret
  namespace: godjira
type: Opaque
stringData:
  JWT_SECRET: "change-this-to-a-secure-random-string-min-32-chars"
  JWT_REFRESH_SECRET: "change-this-to-another-secure-random-string"
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: godjira
  labels:
    app: api
    app.kubernetes.io/name: api
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: godjira
  labels:
    app: api
    app.kubernetes.io/name: api
    app.kubernetes.io/component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/v1/metrics"
    spec:
      containers:
        - name: api
          image: godjira/api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: api-config
            - secretRef:
                name: api-secret
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      # Support multi-architecture (ARM64 for Raspberry Pi, AMD64 for x86)
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - arm64
